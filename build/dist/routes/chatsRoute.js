"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const express_validator_1 = require("express-validator");
const requestValidator_1 = __importDefault(require("../Middleware/requestValidator"));
const sessionValidator_1 = __importDefault(require("../Middleware/sessionValidator"));
const Chats_1 = __importDefault(require("../Models/Chats"));
const router = (0, express_1.Router)();
router.get('/', (0, express_validator_1.query)('id').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().getList(req, res));
router.get('/:jid', (0, express_validator_1.query)('id').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().getChat(req, res));
router.get('/meta/:jid', (0, express_validator_1.query)('id').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().getGroupMetaData(req, res));
router.post('/sendMessage', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), (0, express_validator_1.body)('message').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().send(req, res));
router.post('/readChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().readChat(req, res));
router.post('/unreadChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().unreadChat(req, res));
router.post('/archiveChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().archiveChat(req, res));
router.post('/unarchiveChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().unarchiveChat(req, res));
router.post('/muteChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), (0, express_validator_1.body)('duration').isInt().notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().muteChat(req, res));
router.post('/unmuteChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().unmuteChat(req, res));
router.post('/pinChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().pinChat(req, res));
router.post('/unpinChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().unpinChat(req, res));
router.post('/displayPicture', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().chatDisplayPicture(req, res));
router.post('/setDisplayPicture', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('imageURL').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().setDisplayPicture(req, res));
router.post('/group', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('subject').notEmpty(), (0, express_validator_1.body)('phones').isArray({ min: 1 }).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().createGroup(req, res));
router.post('/groupSettings', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('settings').isIn(['announcement', 'not_announcement', 'locked', 'unlocked']).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().groupSettings(req, res));
router.post('/renameGroup', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('subject').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().renameGroup(req, res));
router.post('/setGroupDescription', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('description').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().setGroupDescription(req, res));
router.post('/leaveGroup', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('description').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().leaveGroup(req, res));
router.post('/addGroupParticipant', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('phones').isArray({ min: 1 }).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().addGroupParticipant(req, res));
router.post('/removeGroupParticipant', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('phones').isArray({ min: 1 }).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().removeGroupParticipant(req, res));
router.post('/promoteGroupParticipant', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('phones').isArray({ min: 1 }).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().promoteGroupParticipant(req, res));
router.post('/demoteGroupParticipant', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), (0, express_validator_1.body)('phones').isArray({ min: 1 }).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().demoteGroupParticipant(req, res));
router.post('/typing', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().setTyping(req, res));
router.post('/recording', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().setRecording(req, res));
router.post('/inviteCode', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('chat').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().inviteCode(req, res));
router.post('/joinGroup', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('code').notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().joinGroup(req, res));
router.post('/clearChat', (0, express_validator_1.query)('id').notEmpty(), (0, express_validator_1.body)('phone'), (0, express_validator_1.body)('chat').if((0, express_validator_1.body)('phone').not().exists()).notEmpty(), requestValidator_1.default, sessionValidator_1.default, (req, res) => new Chats_1.default().clearChat(req, res));
exports.default = router;
